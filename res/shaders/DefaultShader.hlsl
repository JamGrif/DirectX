/*
"SV_" means system value - written to by shader program, CPU can't modify them. Typically contain inputs / outputs from another shader stage, or generated by GPU during rasterization
"POSITION" means vertex buffer data
"SV_POSITION" provides a pixel position to the shader
"COLOR" for RGBA data given to a shader
"SV_TARGET" for writting from a pixel shader to a target texture
*/
#define NUMBER_OF_POINT_LIGHTS 7

Texture2D texture0; 
SamplerState sampler0;






cbuffer PerObjectBUFFER
{
    matrix WVPMatrix;
    
};

cbuffer PerFrameBUFFER
{
    float4 packing; 
};



struct VS_INPUT
{
    float4 vPos : POSITION;
    float2 texcoord : TEXCOORD;
    float3 normal : NORMAL;
};

struct VS_OUTPUT
{
    float4 vPos : SV_Position;
    float2 texcoord : TEXCOORD;
    float3 normal : NORMAL;
};



//Executed for eah vertex in a scene. Minimally returns in a 4-component position vector that gets rasterized into pixel position
VS_OUTPUT VShader(VS_INPUT input) //Vertex shader
{
    VS_OUTPUT output;

    output.vPos = mul(WVPMatrix, input.vPos);
    output.texcoord = input.texcoord;
    


    return output;
}

//Executed for each pixel in a render target. Receives rasterized coordinates from previous shader stage. Returns a 4-component value for that pixel position (color)
float4 PShader (VS_OUTPUT vertex) : SV_Target
{

	float4 color = texture0.Sample(sampler0, vertex.texcoord); //Apply texture to object
    
    
    return color;
    
}




//saturate function retricts values between 0.0 - 1.0